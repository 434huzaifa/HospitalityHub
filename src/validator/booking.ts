import { isValidObjectId } from "mongoose";
import z from "zod";
import { User } from "../schema/user";
import { Room } from "../schema/room";

export const bookingCreateBody = z.object({
  name: z.string().min(3),
  email: z.string().email().optional(),
  number: z
    .string()
    .max(15)
    .min(11)
    .optional()
    .refine(
      (v) => {
        const numberCheckRegEx = /^\+?\d+$/;
        if (v) {
          return numberCheckRegEx.test(v);
        } else {
          return true;
        }
      },
      { message: "Invalid phone number" }
    ),
  bookedBy: z
    .string()
    .refine((v) => isValidObjectId(v), { message: "Invalid ObjectId" })
    .refine(
      async (v) => {
        const user = await User.findById(v);
        return !!user;
      },
      { message: "User does not exist in database" }
    ),
  room: z
    .string()
    .refine((v) => isValidObjectId(v), { message: "Invalid ObjectId" })
    .refine(
      async (v) => {
        const room = await Room.findById(v);
        return !!room;
      },
      { message: "Room does not exist in database" }
    ).openapi({description:"Room must be from Room database."}),
  checkedIn: z.string().datetime(),
  checkedOut: z.string().datetime().optional(),
});

export const bookingResponse = z.object({
  id: z.string().openapi({ description: "This is ObjectId generated by database" }),
  __v: z.number().openapi({ description: "This is v generated by database" }),
  createdAt: z
    .string()
    .datetime()
    .openapi({ description: "This is createdAt generated by database" }),
  updatedAt: z
    .string()
    .datetime()
    .openapi({ description: "This is updatedAt generated by database" }),
  checkedIn: z.string().datetime(),
  checkedOut: z.union([z.string().datetime().optional(), z.null()]),
  email: z.union([z.string().email().optional(), z.null()]),
  number: z.union([z.string().optional(), z.null()]),
  bookedBy: z.string(),
  room: z.string(),
});

export const bookingUpdateBody = z
  .object({
    name: z.string().min(3).optional(),
    email: z.string().email().optional(),
    number: z
      .string()
      .max(15)
      .min(11)
      .optional()
      .refine(
        (v) => {
          const numberCheckRegEx = /^\+?\d+$/;
          if (v) {
            return numberCheckRegEx.test(v);
          } else {
            return true;
          }
        },
        { message: "Invalid phone number" }
      ),
    bookedBy: z
      .string()
      .optional()
      .refine((v) => isValidObjectId(v), { message: "Invalid ObjectId" })
      .refine(
        async (v) => {
          const user = await User.findById(v);
          return !!user;
        },
        { message: "User does not exist in database" }
      ).openapi({description:"User id must be from User database."}),
    room: z
      .string()
      .optional()
      .refine((v) => isValidObjectId(v), { message: "Invalid ObjectId" })
      .refine(
        async (v) => {
          const room = await Room.findById(v);
          return !!room;
        },
        { message: "Room does not exist in database" }
      ),
    checkedIn: z.string().datetime().optional(),
    checkedOut: z.string().datetime().optional(),
  })
  .refine(
    (data) =>
      data.checkedOut ||
      data.checkedIn ||
      data.room ||
      data.bookedBy ||
      data.number ||
      data.email ||
      data.name,
    (data) => {
      return {
        message: `At least one field is required. accepted keys are ${Object.keys(
          data
        ).join(",")}`,
      };
    }
  );

export const bookingQuery = z.object({
  id: z
    .string()
    .refine((v) => isValidObjectId(v), { message: "Invalid ObjectId" }),
});
